<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>shadowrocket-ios-usage</title>
      <link href="/blog/2024/08/21/shadowrocket-ios-usage/"/>
      <url>/blog/2024/08/21/shadowrocket-ios-usage/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ssh remote user</title>
      <link href="/blog/2024/08/06/ssh-remote-user/"/>
      <url>/blog/2024/08/06/ssh-remote-user/</url>
      
        <content type="html"><![CDATA[<p>sudo useradd app<br>sudo passwd app<br>sudo usermod -aG maintain app<br>sudo vim &#x2F;etc&#x2F;sudoers<br>app      ALL&#x3D;(ALL) NOPASSWD: ALL<br>sudo -su app<br>sudo usermod -aG docker $USER<br>sudo mkdir &#x2F;home&#x2F;app<br>sudo chown app:app &#x2F;home&#x2F;app<br>sudo chmod 700 &#x2F;home&#x2F;app</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flink-deploy</title>
      <link href="/blog/2024/08/05/flink-deploy/"/>
      <url>/blog/2024/08/05/flink-deploy/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://nightlies.apache.org/flink/flink-docs-master/zh/docs/try-flink/local_installation/">https://nightlies.apache.org/flink/flink-docs-master/zh/docs/try-flink/local_installation/</a><br>官方文档</p><p>此时暂时使用率不高，主要用spark处理批数据，先docker compose启动一个容器做测试<br>version: ‘3’<br>services:<br>  jobmanager:<br>    image: flink:1.13.2<br>    ports:<br>      - “8081:8081” # Flink Web Dashboard<br>    command: jobmanager<br>    environment:<br>      - JOB_MANAGER_RPC_ADDRESS&#x3D;jobmanager</p><p>  taskmanager:<br>    image: flink:1.13.2<br>    depends_on:<br>      - jobmanager<br>    command: taskmanager<br>    environment:<br>      - JOB_MANAGER_RPC_ADDRESS&#x3D;jobmanager</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hadoop-3node-ha-centos7.9</title>
      <link href="/blog/2024/07/16/hadoop-3node-ha-centos7-9/"/>
      <url>/blog/2024/07/16/hadoop-3node-ha-centos7-9/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop三节点高可用集群配置指南"><a href="#Hadoop三节点高可用集群配置指南" class="headerlink" title="Hadoop三节点高可用集群配置指南"></a>Hadoop三节点高可用集群配置指南</h1><p>本指南将帮助您在CentOS 7上配置Hadoop三节点高可用集群。我们假设您已经安装了Hadoop，并且已经准备好三台机器作为节点。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>三台运行CentOS 7的服务器，分别命名为<code>node1</code>, <code>node2</code>, <code>node3</code>。</li><li>每台服务器上都已经安装了Java和Hadoop。</li><li>每台服务器的<code>/etc/hosts</code>文件已配置好所有节点的IP地址和主机名。</li><li>关闭防火墙，selinux,配置好时间同步</li><li>三台服务器之间的SSH免密登录已经设置好。</li></ul><h2 id="免密步骤"><a href="#免密步骤" class="headerlink" title="免密步骤"></a>免密步骤</h2><p>ssh-keygen -t rsa -b 4096<br>cat ~&#x2F;.ssh&#x2F;id_rsa.pub<br>vim ~&#x2F;.ssh&#x2F;authorized_keys<br>放入三台的id_rsa.pub<br>chmod 700 ~&#x2F;.ssh<br>chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys<br>测试免密登录<br>ssh adc-hadoop-1…-3</p><h2 id="ZooKeeper安装与配置"><a href="#ZooKeeper安装与配置" class="headerlink" title="ZooKeeper安装与配置"></a>ZooKeeper安装与配置</h2><p>Hadoop高可用性依赖于ZooKeeper集群。</p><ol><li><strong>在所有节点上安装ZooKeeper</strong></li></ol><p><a href="https://blog.csdn.net/networken/article/details/116407042">https://blog.csdn.net/networken/article/details/116407042</a></p><ol start="3"><li><p><strong>配置ZooKeeper集群</strong></p><p>在每个节点的<code>/etc/zookeeper/conf/zoo.cfg</code>文件中进行配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">dataDir=/var/lib/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">server.1=adc-hadoop-1:2888:3888</span><br><span class="line">server.2=adc-hadoop-2:2888:3888</span><br><span class="line">server.3=adc-hadoop-3:2888:3888</span><br></pre></td></tr></table></figure><p>在<code>/var/lib/zookeeper</code>目录下创建一个文件名为<code>myid</code>的文件，文件内容为该节点对应的编号（例如，<code>node1</code>的<code>myid</code>文件中就写入<code>1</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; /var/lib/zookeeper/myid <span class="comment"># 在node1上</span></span><br><span class="line"><span class="comment"># 对应地，在node2上写入2，在node3上写入3</span></span><br></pre></td></tr></table></figure><p>然后重启ZooKeeper服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service zookeeper-server restart</span><br></pre></td></tr></table></figure></li></ol><h2 id="Hadoop配置"><a href="#Hadoop配置" class="headerlink" title="Hadoop配置"></a>Hadoop配置</h2><ol><li><p><strong>配置<code>core-site.xml</code></strong></p><p>在所有节点的<code>$HADOOP_CONF_DIR/core-site.xml</code>文件中添加以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:2181,node2:2181,node3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置<code>hdfs-site.xml</code></strong></p><p>在所有节点的<code>$HADOOP_CONF_DIR/hdfs-site.xml</code>文件中添加以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node2:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node2:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://node1:8485;node2:8485;node3:8485/mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/mnt/journal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置<code>yarn-site.xml</code></strong></p><p>在所有节点的<code>$HADOOP_CONF_DIR/yarn-site.xml</code>文件中添加以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置其他YARN相关属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="初始化JournalNode"><a href="#初始化JournalNode" class="headerlink" title="初始化JournalNode"></a>初始化JournalNode</h2><p>在所有节点上启动JournalNode服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure><h2 id="格式化NameNode"><a href="#格式化NameNode" class="headerlink" title="格式化NameNode"></a>格式化NameNode</h2><p>在<code>node1</code>和<code>node2</code>上分别格式化NameNode。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><h2 id="启动Hadoop集群"><a href="#启动Hadoop集群" class="headerlink" title="启动Hadoop集群"></a>启动Hadoop集群</h2><ol><li><p><strong>启动NameNode和DataNode</strong></p><p>在<code>node1</code>和<code>node2</code>上启动NameNode。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>启动ResourceManager和NodeManager</strong></p><p>在所有节点上启动YARN服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure></li></ol><h2 id="验证集群状态"><a href="#验证集群状态" class="headerlink" title="验证集群状态"></a>验证集群状态</h2><p>使用Web界面或<code>hdfs haadmin</code>命令来验证集群的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs haadmin -getServiceState nn1</span><br><span class="line">hdfs haadmin -getServiceState nn2</span><br></pre></td></tr></table></figure><p>现在，您应该有一个运行中的Hadoop高可用集群。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java 8&amp;11 install</title>
      <link href="/blog/2024/07/10/java-8-11-install/"/>
      <url>/blog/2024/07/10/java-8-11-install/</url>
      
        <content type="html"><![CDATA[<p>以下是在CentOS 7.9上安装Java 8和Java 11的步骤</p><h1 id="CentOS-7-9-安装-Java-8-和-Java-11"><a href="#CentOS-7-9-安装-Java-8-和-Java-11" class="headerlink" title="CentOS 7.9 安装 Java 8 和 Java 11"></a>CentOS 7.9 安装 Java 8 和 Java 11</h1><p>在CentOS 7.9上安装Java的步骤如下。我们将展示如何使用yum安装OpenJDK版本的Java 8和Java 11。</p><h2 id="安装Java-8"><a href="#安装Java-8" class="headerlink" title="安装Java 8"></a>安装Java 8</h2><ol><li><p><strong>更新包索引</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure></li><li><p><strong>安装OpenJDK 8</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install java-1.8.0-openjdk</span><br></pre></td></tr></table></figure></li><li><p><strong>验证安装</strong></p><p>检查Java版本以确认安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>输出应该显示Java 8的版本信息。</p></li></ol><h2 id="安装Java-11"><a href="#安装Java-11" class="headerlink" title="安装Java 11"></a>安装Java 11</h2><ol><li><p><strong>更新包索引</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure></li><li><p><strong>安装OpenJDK 11</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install java-11-openjdk</span><br></pre></td></tr></table></figure></li><li><p><strong>验证安装</strong></p><p>检查Java版本以确认安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>输出应该显示Java 11的版本信息。</p></li></ol><h2 id="设置默认Java版本"><a href="#设置默认Java版本" class="headerlink" title="设置默认Java版本"></a>设置默认Java版本</h2><p>如果您的系统上安装了多个Java版本，您可能需要设置默认的Java版本。</p><ol><li><p><strong>查看所有已安装的Java版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alternatives --config java</span><br></pre></td></tr></table></figure><p>这将列出所有安装的Java版本及其路径。</p></li><li><p><strong>选择默认的Java版本</strong></p><p>使用上一步骤中显示的选择编号来设置默认的Java版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo alternatives --config java</span><br></pre></td></tr></table></figure><p>输入对应的编号，然后按回车键。</p></li></ol><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>为了确保Java环境变量正确设置，您可以将<code>JAVA_HOME</code>和<code>PATH</code>环境变量添加到您的用户或系统环境中。</p><ol><li><p><strong>编辑用户的bash配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><p>或者，编辑全局环境变量文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/profile</span><br></pre></td></tr></table></figure></li><li><p><strong>添加<code>JAVA_HOME</code>和<code>PATH</code>变量</strong></p><p>对于Java 8，添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>对于Java 11，添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure></li><li><p><strong>使更改生效</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>或者，如果编辑的是<code>/etc/profile</code>，则需要重新登录或重启系统。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>superset k8s helm</title>
      <link href="/blog/2024/07/05/superset-k8s-helm/"/>
      <url>/blog/2024/07/05/superset-k8s-helm/</url>
      
        <content type="html"><![CDATA[<h1 id="在k8s上部署superset"><a href="#在k8s上部署superset" class="headerlink" title="在k8s上部署superset"></a>在k8s上部署superset</h1><h2 id="安装helm在k8s集群"><a href="#安装helm在k8s集群" class="headerlink" title="安装helm在k8s集群"></a>安装helm在k8s集群</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>data architecture</title>
      <link href="/blog/2024/07/05/data-architecture/"/>
      <url>/blog/2024/07/05/data-architecture/</url>
      
        <content type="html"><![CDATA[<h1 id="常用数据架构"><a href="#常用数据架构" class="headerlink" title="常用数据架构"></a>常用数据架构</h1><p>大数据架构<br>AI数据特点</p><ol><li>多维度性：AI数据涉及从传感器到日志文件的多种数据类型。例如，自动驾驶汽车会产生图像、视频、雷达和激光雷达数据，这些数据不仅多样而且结构复杂，传统的关系数据库难以有效存储和查询这种多维度数据。</li><li>高速变化：AI系统，特别是自动驾驶技术，会生成高速流动的数据。这些数据需要快速处理以实时响应。例如，自动驾驶汽车的感知系统必须能够实时处理周围环境的数据以做出驾驶决策。</li><li>大规模数据集：AI训练和推断需要大量数据。自动驾驶汽车每天可以生成TB级别的数据，这要求有能力处理和分析大规模数据集的架构。</li><li>实时分析需求：AI应用，比如自动驾驶，需要对数据进行实时分析以快速做出决策。这意味着数据架构必须支持流处理和实时分析。（实时分析，把一些AI应用和决策放入云端实现，比如车震报警器此类，dms疲劳监测报警，障碍物信息动态上云，类似高德的堵车提醒）</li><li>灵活性和扩展性：随着技术的进步和业务需求的变化，AI数据的处理和分析需求也会变化。因此，数据架构需要有足够的灵活性和扩展性来适应这些变化。</li></ol><p>为什么选择数据湖仓</p><ol><li>灵活性：数据湖允许存储多种格式的数据，从而支持AI数据的多维度性。它不要求预先定义数据模式，这意味着可以更快地集成新的数据源，并且可以存储原始数据，在未来根据需要进行解析和处理。</li><li>可扩展性：数据湖架构可以横向扩展，以处理大规模数据集。随着自动驾驶数据量的增加，可以简单地增加更多的存储和计算资源，而不会受到传统数据库的限制。</li><li>成本效益：数据湖可以部署在低成本的硬件上，甚至可以在云环境中以服务的形式存在，这有助于控制存储和处理大量数据的成本。</li><li>实时处理能力：结合流处理技术、kafka、flink，数据湖可以支持实时数据摄取和分析，满足自动驾驶汽车实时分析的需求。</li><li>未来适应能力：数据湖架构为未来的技术发展提供了空间，可轻松集成新的分析工具和数据处理技术，以适应AI领域的快速发展。</li></ol><p>常见处理架构<br>Lambda 架构<br>Lambda 架构是一种大数据处理架构，它结合了批处理和流处理的能力。它由三个主要层组成：</p><ol><li>批处理层（Batch Layer）：负责处理大量的历史数据，通常是不变的数据集，以生成批视图。</li><li>速度层（Speed Layer）：处理实时数据流，以便快速提供最新的数据视图。</li><li>服务层（Serving Layer）：将批处理层和速度层的结果合并起来，以提供一个全面的数据视图。<br>Lambda 架构的缺点包括：</li></ol><ul><li>复杂性：需要维护两套逻辑，一套用于批处理，一套用于流处理。</li><li>数据延迟：批处理层可能会导致数据处理有延迟，因为批处理作业通常是周期性运行的。</li><li>资源密集：由于维护两套系统，Lambda 架构可能需要更多的计算资源和开发工作。</li></ul><p>Kappa 架构<br>Kappa 架构是对 Lambda 架构的简化，它只使用一个流处理系统来处理实时和历史数据。这意味着所有数据，无论是实时的还是历史的，都通过同一流处理管道。<br>Kappa 架构的优点是：</p><ul><li>简化的系统设计：只需维护一套处理逻辑。</li><li>减少数据延迟：所有数据几乎可以即时处理，减少了数据到达服务层的时间。<br>Kappa 架构的缺点可能包括：</li><li>对流处理系统的依赖：所有的数据处理都依赖于流处理系统的性能和可靠性。</li><li>处理历史数据的挑战：处理大量历史数据可能会对流处理系统造成压力。</li></ul><p>设计后的架构：<br>数据湖架构（基础+批数据处理，后续全改为流处理），基于AI训练的特征，数据结构以非结构化为主，分析工具无法单独使用hadoop套件完成；<br>非结构数据进各类型桶；接下游使用；<br>结构化数据进spark+iceberg；接海豚调度，进ck和iceberg，可视化用tableau powerbi superset<br>批流一体数据处理用kafka，spark+flink；etl，单独写python、java程序，挂定时调度；</p><p>数据湖：即一个集中的存储仓库，可以存储大量结构化和非结构化数据，并保持其原始形式。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>geoserver install</title>
      <link href="/blog/2024/06/06/geoserver-install/"/>
      <url>/blog/2024/06/06/geoserver-install/</url>
      
        <content type="html"><![CDATA[<h1 id="安装部署geoserver"><a href="#安装部署geoserver" class="headerlink" title="安装部署geoserver"></a>安装部署geoserver</h1><p>1、安装java11<br>sudo yum install java-11-openjdk -y<br>java –version</p><p>如果默认不是11，使用这个命令选择11<br>sudo alternatives –config java</p><p>vim &#x2F;etc&#x2F;profile<br>export JAVA_HOME&#x3D;$(dirname $(dirname $(readlink $(readlink $(which java)))))<br>export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<br>source &#x2F;etc&#x2F;profile</p><p>2、官网下载geoserver的二进制文件压缩包<br>解压到&#x2F;opt&#x2F;geoserver</p><p>3、创建geoserver用户组和geoserver用户<br>groupadd geoserver<br>useradd -g geoserver geoserver</p><p>补充：<br>groupadd zhangsangroup   #创建用户组zhangsangroup<br>useradd -g zhangsan zhangsan  创建用户zhangsan并加入zhangsangroup组</p><p>useradd参数：</p><p>-u UID：指定 UID，这个 UID 必须是大于等于500，并没有其他用户占用的 UID<br>-g GID&#x2F;GROUPNAME：指定默认组，可以是 GID 或者 GROUPNAME，同样也必须真实存在<br>-G GROUPS：指定额外组<br>-c COMMENT：指定用户的注释信息<br>-d PATH：指定用户的家目录</p><p>4、将文件夹授权给geoserver用户<br>chown -R geoserver:geoserver &#x2F;opt&#x2F;geoserver</p><p>5、配置systemctl、启动</p><p>vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;geoserver.service</p><p>[Unit]<br>Description&#x3D;GeoServer<br>After&#x3D;network.target</p><p>[Service]<br>User&#x3D;geoserver<br>Group&#x3D;geoserver<br>Type&#x3D;simple<br>ExecStart&#x3D;&#x2F;opt&#x2F;geoserver&#x2F;bin&#x2F;startup.sh<br>ExecStop&#x3D;&#x2F;opt&#x2F;geoserver&#x2F;bin&#x2F;shutdown.sh<br>Restart&#x3D;on-failure<br>WorkingDirectory&#x3D;&#x2F;opt&#x2F;geoserver</p><p>[Install]<br>WantedBy&#x3D;multi-user.target</p><p>sudo systemctl daemon-reload<br>sudo systemctl start geoserver.service<br>sudo systemctl status geoserver.service</p><h1 id="使用单独的ssd区挂载数据区"><a href="#使用单独的ssd区挂载数据区" class="headerlink" title="使用单独的ssd区挂载数据区"></a>使用单独的ssd区挂载数据区</h1><p>sudo systemctl stop geoserver<br>sudo mkdir -p &#x2F;data&#x2F;geoserver<br>sudo mv &#x2F;opt&#x2F;geoserver&#x2F;data_dir &#x2F;data&#x2F;geoserver&#x2F;data_dir<br>sudo ln -s &#x2F;data&#x2F;geoserver&#x2F;data_dir &#x2F;opt&#x2F;geoserver&#x2F;data_dir<br>sudo chown -R geoserver:geoserver &#x2F;data&#x2F;geoserver&#x2F;data_dir<br>sudo chown -R geoserver:geoserver &#x2F;opt&#x2F;geoserver&#x2F;data_dir<br>sudo chmod -R 700 &#x2F;data&#x2F;geoserver&#x2F;data_dir<br>sudo systemctl start geoserver</p><p>验证<br>sudo -u postgres psql -c “SHOW data_directory;”</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pgsql14+postgis Centos7.9</title>
      <link href="/blog/2024/06/06/pgsql14-postgis-centos7-9/"/>
      <url>/blog/2024/06/06/pgsql14-postgis-centos7-9/</url>
      
        <content type="html"><![CDATA[<p>#在cenos7.9安装pgsql14并且配置postgis插件<br>在CentOS 7.9上安装PostgreSQL 14以及PostGIS插件通常涉及以下步骤：</p><h3 id="安装PostgreSQL-14"><a href="#安装PostgreSQL-14" class="headerlink" title="安装PostgreSQL 14"></a>安装PostgreSQL 14</h3><h2 id="例行-先关掉防火墙和selinux"><a href="#例行-先关掉防火墙和selinux" class="headerlink" title="例行 先关掉防火墙和selinux"></a>例行 先关掉防火墙和selinux</h2><ol><li><p><strong>导入PostgreSQL 14的官方仓库</strong></p><p>首先，你需要导入PostgreSQL的官方仓库。打开终端并运行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p><strong>安装PostgreSQL 14</strong></p><p>一旦添加了仓库，你可以安装PostgreSQL 14：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y postgresql14-server</span><br></pre></td></tr></table></figure></li><li><p><strong>初始化数据库</strong></p><p>安装完成后，需要初始化数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/pgsql-14/bin/postgresql-14-setup initdb</span><br></pre></td></tr></table></figure></li><li><p><strong>启动PostgreSQL服务并设置为开机启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> postgresql-14</span><br><span class="line">sudo systemctl start postgresql-14</span><br></pre></td></tr></table></figure></li><li><p><strong>切换到postgres用户并创建一个新的数据库角色（如果需要）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su - postgres</span><br><span class="line">createuser &lt;your_username&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建一个新的数据库（如果需要）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createdb &lt;your_database_name&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>更改PostgreSQL用户的密码（推荐）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -c <span class="string">&quot;alter user postgres with password &#x27;your_secure_password&#x27;;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="安装PostGIS"><a href="#安装PostGIS" class="headerlink" title="安装PostGIS"></a>安装PostGIS</h3><ol><li><p><strong>安装EPEL仓库</strong></p><p>PostGIS可能需要EPEL仓库中的一些依赖项，因此需要确保EPEL仓库已经安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y epel-release</span><br></pre></td></tr></table></figure></li><li><p><strong>安装PostGIS</strong></p><p>现在可以安装PostGIS扩展了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y postgis31_14</span><br></pre></td></tr></table></figure><p>这将会安装PostGIS和它的依赖项。</p></li><li><p><strong>在你的数据库中启用PostGIS</strong></p><p>你需要为你的数据库启用PostGIS扩展。首先，切换到<code>postgres</code>用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su - postgres</span><br></pre></td></tr></table></figure><p>然后连接到你的数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -d your_database_name</span><br></pre></td></tr></table></figure><p>在你的数据库中启用PostGIS扩展：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION postgis;</span><br></pre></td></tr></table></figure><p>如果你还需要其他相关功能，比如拓扑支持，你还可以添加：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION postgis_topology;</span><br></pre></td></tr></table></figure><p>退出psql：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\q</span><br></pre></td></tr></table></figure></li></ol><p>shp2gpsql命令行；<br>sudo yum install postgis；<br>sudo -su postgres</p><p>##配置允许远程连接<br>cd &#x2F;var&#x2F;lib&#x2F;pgsql&#x2F;14&#x2F;data<br>vim postgresql.conf</p><p>修改监听所有IP</p><h1 id="Connection-Settings"><a href="#Connection-Settings" class="headerlink" title="- Connection Settings -"></a>- Connection Settings -</h1><p>listen_addresses &#x3D; ‘<em>‘          # what IP address(es) to listen on;<br>                                        # comma-separated list of addresses;<br>                                        # defaults to ‘localhost’; use ‘</em>‘ for all<br>vim pg_hba.conf</p><p>加上</p><h1 id="TYPE-DATABASE-USER-ADDRESS-METHOD"><a href="#TYPE-DATABASE-USER-ADDRESS-METHOD" class="headerlink" title="TYPE  DATABASE        USER            ADDRESS                 METHOD"></a>TYPE  DATABASE        USER            ADDRESS                 METHOD</h1><p>host    all             all             0.0.0.0&#x2F;0               md5</p><p>移动数据目录到&#x2F;ssd或者&#x2F;hdd区</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo cmd</title>
      <link href="/blog/2024/06/06/hexo-cmd/"/>
      <url>/blog/2024/06/06/hexo-cmd/</url>
      
        <content type="html"><![CDATA[<p>#hexo命令集合<br>hexo clean 清理<br>hexo g 生成静态文件<br>hexo s 启动本地服务<br>hexo n “” 新建文章<br>hexo d 部署到github上</p><p>hexo init 初始化（很少用）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-no_password</title>
      <link href="/blog/2024/05/10/linux-no-password/"/>
      <url>/blog/2024/05/10/linux-no-password/</url>
      
        <content type="html"><![CDATA[<h1 id="实现服务器登录免密"><a href="#实现服务器登录免密" class="headerlink" title="实现服务器登录免密"></a>实现服务器登录免密</h1><h2 id="在服务器-A-上生成一个-SSH-密钥对（有则跳过）："><a href="#在服务器-A-上生成一个-SSH-密钥对（有则跳过）：" class="headerlink" title="在服务器 A 上生成一个 SSH 密钥对（有则跳过）："></a>在服务器 A 上生成一个 SSH 密钥对（有则跳过）：</h2><p>ssh-keygen -t rsa<br>默认情况下，这会在 ~&#x2F;.ssh&#x2F; 目录下创建两个文件：id_rsa（私钥）和 id_rsa.pub（公钥）。</p><h2 id="将公钥复制到服务器-B："><a href="#将公钥复制到服务器-B：" class="headerlink" title="将公钥复制到服务器 B："></a>将公钥复制到服务器 B：</h2><p>cat ~&#x2F;.ssh&#x2F;id_rsa.pub<br>然后复制输出的内容（公钥），登录到服务器 B，创建或编辑 ~&#x2F;.ssh&#x2F;authorized_keys 文件，并将复制的公钥粘贴到文件的末尾：</p><h2 id="在服务器-B-上"><a href="#在服务器-B-上" class="headerlink" title="在服务器 B 上"></a>在服务器 B 上</h2><p>mkdir -p ~&#x2F;.ssh<br>chmod 700 ~&#x2F;.ssh<br>echo ‘粘贴公钥内容’ &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys<br>chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</p><p>免密要注意 &#x2F;home和~&#x2F; 755 别给777</p><p>以上齐活</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>db-migrate</title>
      <link href="/blog/2024/05/08/db-migrate/"/>
      <url>/blog/2024/05/08/db-migrate/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h1><h2 id="MGR单主集群，通过sql创建用户"><a href="#MGR单主集群，通过sql创建用户" class="headerlink" title="MGR单主集群，通过sql创建用户"></a>MGR单主集群，通过sql创建用户</h2><p>创建一个data管理员用户<br>创建一个map用户，管理3dServer<br>CREATE DATABASE auth;<br>CREATE DATABASE process;<br>CREATE DATABASE 3dServer;<br>CREATE DATABASE label;</p><p>CREATE USER ‘data‘@’%’ IDENTIFIED BY ‘data’;<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘data‘@’%’ WITH GRANT OPTION;<br>FLUSH PRIVILEGES;</p><p>CREATE USER ‘map‘@’%’ IDENTIFIED BY ‘map’;<br>GRANT ALL PRIVILEGES ON <code>3dServer</code>.* TO ‘map‘@’%’;<br>FLUSH PRIVILEGES;</p><p>– 如果创建错误用户可以删除<br>DROP USER ‘3dServer‘@’%’;<br>FLUSH PRIVILEGES;</p><h2 id="配置旧数据库主机到新数据库主机免密"><a href="#配置旧数据库主机到新数据库主机免密" class="headerlink" title="配置旧数据库主机到新数据库主机免密"></a>配置旧数据库主机到新数据库主机免密</h2><p>参考另一篇文章 linux-no_password</p><h2 id="两边创建sql文件夹"><a href="#两边创建sql文件夹" class="headerlink" title="两边创建sql文件夹"></a>两边创建sql文件夹</h2><p>cd ~&#x2F;<br>mkdir -p sql<br>cd sql</p><h2 id="在sql目录执行-数据库服务器a导出原数据库的表"><a href="#在sql目录执行-数据库服务器a导出原数据库的表" class="headerlink" title="在sql目录执行 数据库服务器a导出原数据库的表"></a>在sql目录执行 数据库服务器a导出原数据库的表</h2><p>mysqldump -uroot -proot -h 127.0.0.1 sse count_info_history &gt; count_info_history.sql</p><h2 id="scp-将sql复制过去"><a href="#scp-将sql复制过去" class="headerlink" title="scp 将sql复制过去"></a>scp 将sql复制过去</h2><p>scp *.sql <a href="mailto:&#x78;&#120;&#x78;&#x40;&#120;&#120;&#120;&#x2e;&#x78;&#120;&#46;&#120;&#x78;&#x2e;&#120;&#120;">&#x78;&#120;&#x78;&#x40;&#120;&#120;&#120;&#x2e;&#x78;&#120;&#46;&#120;&#x78;&#x2e;&#120;&#120;</a>:&#x2F;home&#x2F;xxx&#x2F;sql</p><h2 id="在服务器b上导入到新数据库"><a href="#在服务器b上导入到新数据库" class="headerlink" title="在服务器b上导入到新数据库"></a>在服务器b上导入到新数据库</h2><p>cd ~&#x2F;sql&#x2F;<br>mysql -uUsername -pPassword new_database &lt; table_name.sql</p><h2 id="迁移原则："><a href="#迁移原则：" class="headerlink" title="迁移原则："></a>迁移原则：</h2><p>1、在不产生新数据时迁移；<br>2、先迁移使用频次更高的；以便有问题可以更早发现<br>3、逐步迁移，迁移前，先识别出相关项目；各后端做确认；</p><h1 id="迁移pgsql数据；"><a href="#迁移pgsql数据；" class="headerlink" title="迁移pgsql数据；"></a>迁移pgsql数据；</h1><p>1、dump备份数据库：<br>pg_dump -U username -W -F c -b -v -f “&#x2F;path&#x2F;to&#x2F;your&#x2F;backup&#x2F;filename.backup” dbname</p><p>2、配置免密 然后传输<br>scp</p><p>3、在新库恢复数据：<br>createdb -U username newdbname<br>pg_restore -U username -d newdbname -v “&#x2F;path&#x2F;to&#x2F;your&#x2F;backup&#x2F;filename.backup”</p><h1 id="使用单独的ssd区挂载数据区"><a href="#使用单独的ssd区挂载数据区" class="headerlink" title="使用单独的ssd区挂载数据区"></a>使用单独的ssd区挂载数据区</h1><p>sudo systemctl stop postgresql14<br>sudo mkdir -p &#x2F;data&#x2F;pgsql&#x2F;14<br>sudo mv &#x2F;var&#x2F;lib&#x2F;pgsql&#x2F;14&#x2F;data &#x2F;data&#x2F;pgsql&#x2F;14&#x2F;data<br>sudo ln -s &#x2F;data&#x2F;pgsql&#x2F;14&#x2F;data &#x2F;var&#x2F;lib&#x2F;pgsql&#x2F;14&#x2F;data<br>sudo chown -R postgres:postgres &#x2F;data&#x2F;pgsql&#x2F;14&#x2F;data<br>sudo chown -R postgres:postgres &#x2F;var&#x2F;lib&#x2F;pgsql&#x2F;14&#x2F;data<br>sudo chmod -R 700 &#x2F;data&#x2F;pgsql&#x2F;14&#x2F;data<br>sudo systemctl start postgresql14</p><p>验证<br>sudo -u postgres psql -c “SHOW data_directory;”</p>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tool-vim</title>
      <link href="/blog/2024/05/07/tool-vim/"/>
      <url>/blog/2024/05/07/tool-vim/</url>
      
        <content type="html"><![CDATA[<h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p>普通模式<br>hjkl左上下右移动<br>gg跳到第一行<br>G跳到最后一行<br>ctrl+u&#x2F;ctrl+d  上一页下一页 记忆 u up d down<br>{line_number}gg 跳到特定行<br>zz&#x2F;zb&#x2F;zt光标设置为屏幕第一行 居中 最后一行 记忆b button t top<br>^当前行开头<br>$当前行最后</p><p>i 当前光标前开始写<br>a 当前光标后开始写<br>o 当前光标下一行开始写<br>s 删除当前光标内容然后开始写</p><p>visual模式<br>按v<br>x剪切<br>y复制<br>p粘贴</p><p>搜索<br>&#x2F;{pattern} 下一个出现的地方</p><p>？{pattern} 上一个出现的地方</p><p>dd删除当前行<br>dgg删除到第一行<br>dG删除到最后一行</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>db-mysql</title>
      <link href="/blog/2024/05/06/db-mysql/"/>
      <url>/blog/2024/05/06/db-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建高可用mysql-三节点"><a href="#搭建高可用mysql-三节点" class="headerlink" title="搭建高可用mysql-三节点"></a>搭建高可用mysql-三节点</h1><h2 id="机器环境："><a href="#机器环境：" class="headerlink" title="机器环境："></a>机器环境：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/*release </span><br><span class="line">lscpu</span><br><span class="line">free -h</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><p>查看当前机器系统、cpu核数、内存、磁盘空间</p><p>1、adc-mysql-1:centos7.9，4C，7.7G（swap 8G），92G，10.32.9.227<br>2、adc-mysql-2:centos7.9，4C，7.7G（swap 8G），92G，10.32.9.228<br>3、adc-mysql-3:centos7.9，4C，7.6G（swap 0），92G，10.32.11.176</p><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>关闭防火墙<br>关闭防火墙（firewalld）<br>停止 firewalld 服务：</p><p>sudo systemctl stop firewalld<br>禁用 firewalld 服务在启动时自动启动：</p><p>sudo systemctl disable firewalld<br>检查 firewalld 的状态以确保它已停止并且被禁用：</p><p>sudo systemctl status firewalld</p><p>关闭 SELinux<br>临时关闭 SELinux（直到下次重启）：</p><p>sudo setenforce 0<br>永久关闭 SELinux（需要重启生效）：</p><p>编辑 SELinux 配置文件：</p><p>sudo nano &#x2F;etc&#x2F;selinux&#x2F;config<br>找到这一行：</p><p>SELINUX&#x3D;enforcing<br>将其修改为：</p><p>SELINUX&#x3D;disabled<br>保存并关闭文件。</p><p>配置hostname<br>#编辑&#x2F;etc&#x2F;hosts文件<br>vi &#x2F;etc&#x2F;hosts<br>10.32.9.227 adc-mysql-1<br>10.32.9.228 adc-mysql-2<br>10.32.11.176 adc-mysql-3<br>重启网卡<br>service network restart<br>查看hostname是否修改<br>hostname</p><h2 id="各节点安装-MySQL"><a href="#各节点安装-MySQL" class="headerlink" title="各节点安装 MySQL"></a>各节点安装 MySQL</h2><p>1、mysql版本：8.0.30</p><p>添加yum源<br>安装mysql<br>配置my.cnf<br>要在CentOS 7.9上安装MySQL 8.0.30，您需要按照以下步骤操作：</p><p>import秘钥，此处需要带年份，2024的秘钥没有，所以使用的2023<br>sudo rpm –import <a href="https://repo.mysql.com/RPM-GPG-KEY-mysql-2023">https://repo.mysql.com/RPM-GPG-KEY-mysql-2023</a></p><p>下载MySQL Yum仓库配置包：<br>此处参考网上文档，使用7-5<br>wget <a href="https://dev.mysql.com/get/mysql80-community-release-el7-5.noarch.rpm">https://dev.mysql.com/get/mysql80-community-release-el7-5.noarch.rpm</a><br>安装MySQL Yum仓库配置包：</p><p>sudo rpm -ivh mysql80-community-release-el7-5.noarch.rpm<br>这个命令将添加MySQL仓库到您的仓库列表中。</p><p>查看可用的MySQL版本：<br>yum list mysql-community-server –showduplicates<br>这将列出所有可用的MySQL社区服务器版本。</p><p>选择特定版本进行安装：<br>sudo yum install mysql-community-server-8.0.30</p><p>检查是否存在mysql用户<br>id mysql</p><p>创建数据目录sudo，并授权给mysql用户<br>sudo mkdir -p &#x2F;data&#x2F;mysql&#x2F;data<br>sudo mkdir -p &#x2F;data&#x2F;mysql&#x2F;tmp<br>sudo mkdir -p &#x2F;data&#x2F;mysql&#x2F;logs<br>sudo mkdir -p &#x2F;data&#x2F;mysql&#x2F;binlog<br>sudo chown -R mysql:mysql &#x2F;data&#x2F;mysql<br>sudo chmod 777 &#x2F;data<br>sudo chmod -R 750 &#x2F;data&#x2F;mysql</p><p>配置my.cnf<br>配置如下：<br>sudo vim &#x2F;etc&#x2F;my.cnf<br>‘’’<br>[mysqld]<br>datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data​<br>socket&#x3D;&#x2F;data&#x2F;mysql&#x2F;mysql.sock​<br>tmpdir&#x3D;&#x2F;data&#x2F;mysql&#x2F;tmp​<br>log-error&#x3D;&#x2F;data&#x2F;mysql&#x2F;logs&#x2F;mysqld.log​<br>pid-file&#x3D;&#x2F;data&#x2F;mysql&#x2F;mysqld.pid​<br>#是否打开慢查询sql日志​<br>general_log&#x3D;0​<br>general_log_file&#x3D;&#x2F;data&#x2F;mysql&#x2F;logs&#x2F;general.log​<br>slow_query_log&#x3D;1​<br>slow_query_log_file&#x3D;&#x2F;data&#x2F;mysql&#x2F;logs&#x2F;mysql-slow.log​<br>long_query_time&#x3D;5​<br>character-set-server&#x3D;utf8mb4​<br>collation-server&#x3D;utf8mb4_general_ci​<br>default-storage-engine&#x3D;INNODB​<br>init_connect&#x3D;’SET NAMES utf8mb4’​<br>transaction_isolation&#x3D;READ-COMMITTED​<br>binlog_format&#x3D;ROW​<br>binlog_expire_logs_seconds&#x3D;604800<br>log_bin&#x3D;&#x2F;data&#x2F;mysql&#x2F;binlog&#x2F;mysql-bin​<br>log_bin_index&#x3D;&#x2F;data&#x2F;mysql&#x2F;binlog&#x2F;mysql-bin.index​<br>relay_log&#x3D;&#x2F;data&#x2F;mysql&#x2F;logs&#x2F;relay-log​<br>relay_log_index&#x3D;&#x2F;data&#x2F;mysql&#x2F;logs&#x2F;relay-log.index​</p><p>#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭​<br>##MySQL默认的wait_timeout 值为8个小时, interactive_timeout参数需要同时配置才能生效​<br>interactive_timeout&#x3D;1800​<br>wait_timeout&#x3D;1800​<br>#最大连接数​<br>max_connections&#x3D;4096​<br>#最大错误连接数​<br>max_connect_errors &#x3D; 10​<br>#是否对sql语句大小写敏感，1表示不敏感​<br>lower_case_table_names&#x3D;1​<br>#时区​<br>default_time_zone &#x3D; “+8:00”​ ​<br>#默认使用“mysql_native_password”插件认证​<br>default_authentication_plugin&#x3D;mysql_native_password​<br>#INNODB​<br>innodb_flush_method &#x3D; O_DIRECT​<br>innodb_log_file_size &#x3D; 512M​<br>innodb_log_files_in_group &#x3D; 3​<br>innodb_flush_log_at_trx_commit &#x3D; 0​<br>innodb_strict_mode &#x3D; ON​<br>innodb_data_file_path &#x3D; ibdata1:256M;ibdata2:16M:autoextend​<br>innodb_checksum_algorithm &#x3D; strict_crc32​<br>innodb_lock_wait_timeout &#x3D; 5​<br>sql_mode&#x3D;’STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION’​</p><p>#mgr​<br>server_id&#x3D;1<br>gtid_mode&#x3D;ON​<br>enforce_gtid_consistency&#x3D;ON​<br>master_info_repository&#x3D;TABLE​<br>relay_log_info_repository&#x3D;TABLE​<br>relay_log_recovery&#x3D;ON​<br>binlog_checksum&#x3D;NONE​<br>log_slave_updates&#x3D;ON​<br>plugin_load_add&#x3D;’group_replication.so’​<br>transaction_write_set_extraction&#x3D;XXHASH64​<br>loose-group_replication_group_name&#x3D;”6789b6d7-de75-11ec-a59e-fa163e7035c7”​<br>loose-group_replication_start_on_boot&#x3D;off​<br>loose-group_replication_local_address&#x3D; “10.32.9.227:33061”​<br>loose-group_replication_group_seeds&#x3D; “10.32.9.227:33061,10.32.9.228:33061,10.32.11.176:33061”​ loose-group_replication_bootstrap_group&#x3D;off<br>loose-group_replication_ip_whitelist&#x3D;”10.32.9.227,10.32.9.228,10.32.11.176”​<br>[client]​<br>socket&#x3D;&#x2F;data&#x2F;mysql&#x2F;mysql.sock​<br>default-character-set&#x3D;utf8mb4<br>‘’’</p><p>初始化MySQL数据库<br>sudo mysqld –initialize<br>sudo cat &#x2F;data&#x2F;mysql&#x2F;logs&#x2F;mysqld.log<br>sudo grep ‘temporary password’ &#x2F;data&#x2F;mysql&#x2F;logs&#x2F;mysqld.log<br>把初始化好的文件也从root转给mysql用户<br>sudo chown -R mysql:mysql &#x2F;data&#x2F;mysql</p><p>启动MySQL服务<br>systemctl start mysqld<br>查看MySQL服务状态<br>systemctl status mysqld</p><p>登录mysql更改临时密码，创建管理员账号<br>sudo mysql -uroot -p</p><p>修改mysql root 用户密码<br>alter user ‘root‘@’localhost’ identified by ‘root’ ;<br>修改其他ip地址可以连接本机mysql<br>use mysql;<br>update user set host&#x3D;’%’ where user &#x3D; ‘root’;<br>flush privileges;<br>alter user ‘root‘@’%’ identified with mysql_native_password by ‘root’;<br>flush privileges;</p><h2 id="配置MGR"><a href="#配置MGR" class="headerlink" title="配置MGR"></a>配置MGR</h2><p>打开my.cnf增加配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#mgr</span><br><span class="line">server_id=3</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br><span class="line">relay_log_recovery=ON</span><br><span class="line">log_bin=binlog</span><br><span class="line">binlog_checksum=NONE</span><br><span class="line">binlog_format=ROW</span><br><span class="line">log_slave_updates=ON</span><br><span class="line"></span><br><span class="line">plugin_load_add=&#x27;group_replication.so&#x27;</span><br><span class="line">transaction_write_set_extraction=XXHASH64</span><br><span class="line">loose-group_replication_group_name=&quot;6e51636d-8e7c-8253-0b4b-1029b2e4f6f9&quot;</span><br><span class="line">loose-group_replication_start_on_boot=off</span><br><span class="line">loose-group_replication_local_address= &quot;10.32.11.176:33061&quot;</span><br><span class="line">loose-group_replication_group_seeds= &quot;10.32.9.227:33061,10.32.9.228:33061,10.32.11.176:33061&quot;</span><br><span class="line">loose-group_replication_bootstrap_group=off</span><br><span class="line">loose-group_replication_ip_whitelist=&quot;10.32.9.227,10.32.9.228,10.32.11.176&quot;</span><br></pre></td></tr></table></figure><p>增加mgr复制用户（三台机器都要操作）<br>SET SQL_LOG_BIN&#x3D;0;<br>CREATE USER mgruser@’%’ IDENTIFIED BY ‘mgruser’;<br>GRANT REPLICATION SLAVE ON <em>.</em> TO mgruser@’%’;<br>FLUSH PRIVILEGES;<br>SET SQL_LOG_BIN&#x3D;1;<br>CHANGE MASTER TO MASTER_USER&#x3D;’mgruser’, MASTER_PASSWORD&#x3D;’mgruser’ FOR CHANNEL ‘group_replication_recovery’;</p><p>show plugins;<br>install PLUGIN group_replication SONAME ‘group_replication.so’;<br>查看是否下载成功，使用show plugins;语句查看</p><h2 id="启动mgr单主模式启动一主两从"><a href="#启动mgr单主模式启动一主两从" class="headerlink" title="启动mgr单主模式启动一主两从"></a>启动mgr单主模式启动一主两从</h2><p>主节点操作<br>SET GLOBAL group_replication_bootstrap_group&#x3D;ON;<br>START GROUP_REPLICATION;<br>SET GLOBAL group_replication_bootstrap_group&#x3D;OFF;</p><p>从节点操作<br>START GROUP_REPLICATION;</p><p>查看此时MGR组信息，MEMBER_STATE状态全部是ONLINE才是成功。不然就需要查看日志信息。<br>SELECT * FROM performance_schema.replication_group_members;</p><p>四、测试数据读写<br>主库上操作</p><ol><li>创建数据库<br>create database mgr;<br>查看从库上是否有数据库mgr</li><li>创建表<br>use mgr;<br>CREATE TABLE <code>user</code> (<br>  <code>id</code> bigint NOT NULL ,<br>  <code>account</code> varchar(30)  NOT NULL ,<br>  <code>name</code> varchar(50) NOT NULL ,<br>  PRIMARY KEY (<code>id</code>) USING BTREE,<br>  UNIQUE KEY <code>UN_ACCOUNT</code> (<code>account</code>) USING BTREE<br>)<br>从库上查看表信息</li><li>插入数据<br>INSERT INTO user VALUES (1, ‘zhangsan’, ‘张三’);<br>INSERT INTO user VALUES (2, ‘lisi’, ‘李四’);<br>从库查看信息如下</li><li>删除数据<br>delete from user where id &#x3D; 1;<br>从库user表信息更新</li><li>从库只有查询的权力，没有更改的权限</li><li>主库服务停掉，查看从库状态变化<br>在node1 上执行<br>stop group_replication;<br>node1 状态变成OFFLINE下线状态<br> 在node2 上查看组信息，发现node3现在的MEMBER_ROLE为PRIMARY<br> 重新启动node1</li></ol><p>start group_replication;<br>node1 重新加入到组中，但是此时是从节点</p><p>参考：<a href="https://blog.csdn.net/axibazZ/article/details/127103865">https://blog.csdn.net/axibazZ/article/details/127103865</a></p><h2 id="配置mysql-router"><a href="#配置mysql-router" class="headerlink" title="配置mysql router"></a>配置mysql router</h2><p>五、MGR整合MySQL Router实现读写分离</p><ol><li>下载安装MySQL Router</li></ol><p>这里我安装在node2节点上</p><p>下载<br>wget <a href="https://dev.mysql.com/get/Downloads/MySQL-Router/mysql-router-8.0.23-el7-x86_64.tar.gz">https://dev.mysql.com/get/Downloads/MySQL-Router/mysql-router-8.0.23-el7-x86_64.tar.gz</a><br>解压<br>tar -zxvf mysql-router-8.0.23-el7-x86_64.tar.gz<br>重命名<br>mv mysql-router-8.0.23-el7-x86_64 mysql-router-8.0<br>将mysql-router的目录添加到环境变量PATH中<br>echo “export PATH&#x3D;$PATH:&#x2F;opt&#x2F;apps&#x2F;mysql-router-8.0&#x2F;bin&#x2F;“ &gt;&gt; &#x2F;etc&#x2F;profile<br>source &#x2F;etc&#x2F;profile</p><p>使用yum install 安装 yum install mysqlrouter</p><p>验证是否安装成功<br>mysqlrouter -V<br>2. 修改MySQL Router配置</p><p>在mysql-router-8.0目录下</p><p>创建日志和数据目录<br>mkdir logs data<br>在&#x2F;etc 目录下创建mysqlrouter.cnf文件，内容如下<br>[DEFAULT]<br>logging_folder &#x3D; &#x2F;var&#x2F;log&#x2F;mysqlrouter<br>runtime_folder &#x3D; &#x2F;run&#x2F;mysqlrouter<br>config_folder &#x3D; &#x2F;etc&#x2F;mysqlrouter</p><p>connect_timeout&#x3D;30<br>read_timeout&#x3D;30</p><p>[logger]<br>level &#x3D; INFO</p><h1 id="If-no-plugin-is-configured-which-starts-a-service-keepalive"><a href="#If-no-plugin-is-configured-which-starts-a-service-keepalive" class="headerlink" title="If no plugin is configured which starts a service, keepalive"></a>If no plugin is configured which starts a service, keepalive</h1><h1 id="will-make-sure-MySQL-Router-will-not-immediately-exit-It-is"><a href="#will-make-sure-MySQL-Router-will-not-immediately-exit-It-is" class="headerlink" title="will make sure MySQL Router will not immediately exit. It is"></a>will make sure MySQL Router will not immediately exit. It is</h1><h1 id="safe-to-remove-once-Router-is-configured"><a href="#safe-to-remove-once-Router-is-configured" class="headerlink" title="safe to remove once Router is configured."></a>safe to remove once Router is configured.</h1><p>[keepalive]<br>interval &#x3D; 60</p><p>[routing:primary]<br>bind_address &#x3D; 0.0.0.0<br>bind_port &#x3D; 3307<br>max_connections &#x3D; 1024<br>destinations &#x3D; 10.32.9.227:3306,10.32.9.228:3306,10.32.11.176:3306<br>routing_strategy &#x3D; first-available</p><p>[routing:secondary]<br>bind_address &#x3D; 0.0.0.0<br>bind_port &#x3D; 3308<br>max_connections &#x3D; 1024<br>destinations &#x3D; 10.32.9.228:3306,10.32.11.176:3306<br>routing_strategy &#x3D; round-robin</p><p>修改权限(使用yum install则不需要)<br>chown -R mysql:mysql &#x2F;opt&#x2F;apps&#x2F;mysql-router-8.0&#x2F;<br>chown -R mysql:mysql &#x2F;etc&#x2F;mysqlrouter.conf<br>3. 启动MySQL Router<br>sudo systemctl start mysqlrouter(使用yum install)<br>mysqlrouter –config&#x3D;&#x2F;etc&#x2F;mysqlrouter.conf &amp;（安装包安装）<br>4. 验证是否正确<br>在node1 上连接 228 的 3307 端口查看现在的主库为node1，并且其他节点连接129的7001也均为node1。<br>在node1 上连接 228 的 3308 端口，显示连接的为node3<br>在node2 上连接 228 的 3308 端口，显示连接的为node2<br>在node3上连接 129 的 3308 端口，显示连接的为node3<br>5、验证连接3307写入</p><p>DELIMITER $$</p><p>CREATE PROCEDURE InsertMassiveData()<br>BEGIN<br>  DECLARE i INT DEFAULT 1;<br>  WHILE i &lt;&#x3D; 10000 DO<br>    INSERT INTO user (id, account, name) VALUES (i, CONCAT(‘user’, i), CONCAT(‘Name’, i));<br>    SET i &#x3D; i + 1;<br>  END WHILE;<br>END$$</p><p>DELIMITER ;</p><p>CALL InsertMassiveData();</p><p>select count(*) from mgr.user;<br>结果为10000；</p><p>至此，MySQL MGR集群安装完毕。</p>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
